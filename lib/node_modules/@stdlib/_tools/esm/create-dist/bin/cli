#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*		http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var CLI = require( '@stdlib/tools/cli' );
var stdin = require( '@stdlib/process/read-stdin' );
var ls = require( '@stdlib/_tools/pkgs/browser-compatible' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var isWhitespace = require( '@stdlib/assert/is-whitespace' );
var RE_WHITESPACE = require( '@stdlib/regexp/whitespace' );
var RE_EOL = require( '@stdlib/regexp/eol' );
var trim = require( '@stdlib/string/trim' );
var createDist = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var lsOpts;
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();

	if ( flags.help || flags.version ) {
		return;
	}

	opts = {
		'preserveTmp': flags['preserve-tmp']
	};

	// Verify that an output location has been specified:
	if ( !flags.output ) {
		return cli.error( new Error( 'expected output location specified with --output flag.' ) );
	}

	lsOpts = { };

	if ( flags.ignore ) {
		lsOpts[ 'ignore' ] = flags.ignore;
	} else {
		lsOpts[ 'ignore' ] = [
			'@stdlib/_tools/**',
			'@stdlib/tools/**',
			'@stdlib/repl/**',
			'@stdlib/namespace/**/package.json'
		];
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Check if we are receiving data from `stdin`...
	if ( !process.stdin.isTTY ) {
		return stdin( onRead );
	}

	if ( args.length ) {
		createDist( args, flags.output, opts, onComplete );
	} else {
		ls( lsOpts, onPkgs );
	}

	/**
	 * Callback invoked upon listing of browser-compatible packages.
	 *
	 * @private
	 * @param {(Error|null)} errors - error object
	 * @param {Array} pkgs - list of packages
	 * @returns {void}
	 */
	function onPkgs( errors, pkgs ) {
		if ( errors ) {
			throw errors;
		}

		createDist( pkgs, flags.output, opts, onComplete );
	}

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var pkgList;
		var lines;
		var parts;
		var i;
		var j;
		if ( error ) {
			return cli.error( error );
		}

		lines = data.toString().split( RE_EOL );

		pkgList = [];
		for ( i = 0; i < lines.length; i++ ) {
			if ( lines[ i ].length === 0 || isWhitespace( lines[ i ] ) ) {
				continue;
			}

			parts = trim( lines[ i ] ).split( RE_WHITESPACE );

			for ( j = 0; j < parts.length; j++ ) {
				pkgList.push( trim( parts[ j ] ) );
			}
		}

		createDist( pkgList, flags.output, opts, onComplete );
	}

	/**
	* Callback invoked upon completion of bundling.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onComplete( error ) {
		if ( error instanceof Error ) {
			return cli.error( error );
		}
	}
}

main();
