/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var mkdirp = require( 'mkdirp' ).sync;
var logger = require( 'debug' );
var mapKeys = require( '@stdlib/utils/map-keys' );
var forEach = require( '@stdlib/utils/async/for-each' );


// VARIABLES //

var debug = logger( 'esm-create-dist:copy-sources' );


// FUNCTIONS //

/**
 * Construct a function to expand alias key paths.
 *
 * @private
 * @param {String} dir - package directory
 * @returns {Function} alias map key expansion function
 */
function expandAliasFactory( dir ) {
	/**
	 * A function to expand alias key paths.
	 *
	 * @private
	 * @param {String} key - alias map key
	 * @returns {String} mapped key
	 */
	function expandAlias( key ) {
		if ( /lib$/.test( key ) ) {
			return path.resolve( dir, key, 'index.js' );
		}

		return path.resolve( dir, key );
	}

	return expandAlias;
}

/**
 * Construct a function for iterating over a package file.
 *
 * @private
 * @param {Object} deps - package deps, returned from @stdlib/_tools/pkgs/browser-deps
 * @param {String} outputDir - base output directory
 * @param {Object} aliases - expanded browser file aliases
 * @param {Array} files - mutable running list of outputted files
 * @returns {Function} file iteration function
 */
function onFileFactory( deps, outputDir, aliases, files ) {
	/**
	 * Iterate over a file to be copied.
	 *
	 * @private
	 * @param {String} file - path to file
	 * @param {Number} i - iteration index
	 * @param {Callback} clbk - callback executed on completion
	 * @returns {void}
	 */
	function onFile( file, i, clbk ) {
		var alias;
		var from;
		var rel;
		var to;

		rel = path.relative( deps.dir, file );

		debug( 'Copying file %d of %d for package %s: %s', i + 1, deps.files.length, deps.pkg, rel );

		to = path.resolve( outputDir, deps.pkg, rel );

		alias = aliases[ file ];

		if ( typeof alias === 'undefined' ) {
			from = file;
		} else {
			debug('Using alias to copy ./%s from %s', rel, alias );

			from = path.resolve( deps.dir, alias );
		}

		mkdirp( path.dirname( to ) );

		files.push( to );

		fs.copyFile( from, to, clbk );
	}

	return onFile;
}


// MAIN //

/**
 * Copy browser package sources, applying aliases.
 *
 * @param {Array} pkgsDeps - package deps, returned from @stdlib/_tools/pkgs/browser-deps
 * @param {String} outputDir - Base output directory name
 * @param {Callback} clbk - callback called upon completion
 * @returns {void}
 */
function copySources( pkgsDeps, outputDir, clbk ) {
	var files;
	var opts;

	files = [];

	opts = {
		'limit': 5
	};

	forEach( pkgsDeps, opts, onPkgDeps, onComplete );

	/**
	 * Function for iterating over packages.
	 *
	 * @private
	 * @param {Object} deps - package deps, from @stdlib/_tools/pkgs/browser-deps
	 * @param {Callback} next - function called on completion
	 * @returns {void}
	 */
	function onPkgDeps( deps, next ) {
		var expandAlias;
		var aliases;
		var onFile;
		var opts;

		expandAlias = expandAliasFactory( deps.dir );
		aliases = mapKeys( deps.aliases, expandAlias );

		onFile = onFileFactory( deps, outputDir, aliases, files );

		opts = {
			'limit': 5
		};

		forEach( deps.files, opts, onFile, next );
	}

	/**
	 * Function executed on completion of copying.
	 *
	 * @private
	 * @param {Error|null} err - error, if encountered during copying
	 * @returns {void}
	 */
	function onComplete( err ) {
		if ( err instanceof Error ) {
			clbk( err );
			return;
		}

		clbk( null, files );
	}
}


// EXPORTS //

module.exports = copySources;
