/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var rollup = require( 'rollup' );
var rollupPluginJSON = require( '@rollup/plugin-json' );


// VARIABLES //

var debug = logger( 'esm:bundle' );


// MAIN //

/**
* Asynchronously bundle an entry point.
*
* @param {string} entry - path to entry point file
* @param {Options} [options] - function options
* @param {Callback} clbk - callback to invoke after bundling
* @returns {void}
*
*/
function bundle( entry, options, clbk ) {
	var outputOptions;
	var inputOptions;

	debug( 'Bundling entry point "%s".', entry);

	inputOptions = {
		'input': entry,
		'external': [ /^@stdlib/ ],
		'plugins': [
			rollupPluginJSON()
		]
	};

	outputOptions = {
	};

	/**
	 * Callback invoked on successful bundler instantiation.
	 *
	 * @private
	 * @param {Object} bundle - bundler instance
	 * @returns {Promise} continuation
	 */
	function onBundlerInstantiation( bundle ) {
		return bundle.generate(outputOptions);
	}

	/**
	 * Callback executed on completion of bundling.
	 *
	 * @private
	 * @param {Object} output - bundler output
	 * @returns {void}
	 */
	function onBundle( output ) {
		clbk(null, output.output[0].code);
	}

	/**
	 * Callback executed on failure of bundling.
	 *
	 * @private
	 * @param {Error} error - error instance
	 * @returns {void}
	 */
	function onError( error ) {
		clbk( error );
	}

	rollup.rollup( inputOptions )
		.then( onBundlerInstantiation )
		.then( onBundle )
		.catch( onError );
}


// EXPORTS //

module.exports = bundle;
