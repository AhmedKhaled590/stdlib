/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var debug = logger( 'esm:transform-vendor-requires' );

var REQUIRE_STATEMENT_REGEX = /\brequire\s*\(\s*('([^']*)'|"([^"]*)")\s*\)/g;
var STDLIB_REQUIRE_REGEX = /@stdlib\//;
var RELATIVE_REQUIRE_REGEX = /^\./;
var JS_EXTENSION_REGEX = /\.js$/;


// FUNCTIONS //

/**
 * Transform vendor requires to a stdlib require.
 *
 * @private
 * @param {String} str - entire input string
 * @param {String} _1 - unused match part
 * @param {String} singleQuotePath - required path, if single-quoted
 * @param {String} doubleQuotePath - required path, if double-quoted
 * @returns {String} transformed line
 */
function transformVendorRequire( str, _1, singleQuotePath, doubleQuotePath ) {
	var isRelativeRequire;
	var isStdlibRequire;
	var hasJsExtension;
	var vendor;
	var path;

	path = ( typeof singleQuotePath === 'undefined' ) ? doubleQuotePath : singleQuotePath;

	isStdlibRequire = STDLIB_REQUIRE_REGEX.test( path );
	isRelativeRequire = RELATIVE_REQUIRE_REGEX.test( path );

	if ( isStdlibRequire || isRelativeRequire ) {
		debug( 'Deeming require of "%s" not fit for rewriting', path );
		return str;
	}

	vendor = '@stdlib/vendor/' + path;

	hasJsExtension = JS_EXTENSION_REGEX.test( vendor );
	if ( !hasJsExtension ) {
		vendor += '.js';
	}

	debug( 'Rewriting require of "%s" to "%s"', path, vendor );

	return "require( '" + vendor + "' )";
}


// MAIN //

/**
 * Transfomr vendor requires in source code from node_modules resolution to @stdlib/vendor.
 *
 * @param {String} src - input source
 * @throws {TypeError} source must be a string or a buffer
 * @returns {String} transformed source
 */
function transformVendorRequires( src ) {
	var isStr;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	src = replace( src, REQUIRE_STATEMENT_REGEX, transformVendorRequire );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformVendorRequires;
