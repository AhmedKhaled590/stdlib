/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var IMPORT_REGEX = /^\s*import\s+([\w$]+|{[^}]*})\s+from\s*("([\w-@$/.js]+)"|'([\w-@$/.js]+)')\s*;(.*)$/gm;
var NAMED_EXPORT_REGEX = /^export\s*{\s*(\w+)\s+as\s+(\w+)\s*}\s*from\s*['"]([^"']+)['"]\s*;\s*$/gm;


// MAIN //

/**
 * Transform import paths to relative paths.
 *
 * @param {String} sourcePath - path of this source
 * @param {String} baseDir - path of base directory
 * @param {String} src - source content to be transformed
 * @param {String} opts - configuration object
 * @throws {TypeError} validatePath option must be a RegExp
 * @throws {TypeError} first argument must be a string or buffer
 * @returns {String} transformed source
 */
function transformImports( sourcePath, baseDir, src, opts ) {
	var pathValidationRegExp;
	var hasValidation;
	var sourceDir;
	var isStr;

	if ( typeof opts !== 'undefined' ) {
		pathValidationRegExp = opts[ 'validatePath' ];
	}

	hasValidation = typeof pathValidationRegExp !== 'undefined';

	if ( hasValidation && !isRegExp( pathValidationRegExp ) ) {
		throw new TypeError( '`validatePath` must be a RegExp' );
	}

	sourceDir = path.resolve( path.dirname( sourcePath ) );

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	/**
	 * Transform import statement to use relative path.
	 *
	 * @private
	 * @param {String} str - matched string
	 * @param {String} identifier - identifier receiving assignment
	 * @param {String} _1 - unused match part
	 * @param {String} doubleQuotesImportPath - import path, if double-quoted
	 * @param {String} singleQuotesImportPath - import path, if single-quoted
	 * @throws {Error} paths must match validation, if provided
	 * @returns {String} transformed import string
	 */
	function transformImport( str, identifier, _1, doubleQuotesImportPath, singleQuotesImportPath) { // eslint-disable-line max-len
		var relativePath;
		var importPath;
		var importBase;
		var importDir;
		var importExt;

		importPath = ( typeof doubleQuotesImportPath === 'undefined' ) ? singleQuotesImportPath : doubleQuotesImportPath;

		if ( pathValidationRegExp && !pathValidationRegExp.test( importPath ) ) { // eslint-disable-line max-len
			throw new Error( 'Error while processing \'' + str + '\'. Expected path to match \'' + opts['validatePath'] + '\' but got path \'' + importPath + '\'' );
		}

		importPath = path.resolve( path.join( baseDir, importPath ) );

		// Decompose and reassemble the path so that we can be sure not to mix up directories with files with implicit extensions
		importExt = path.extname( importPath );
		importBase = path.basename( importPath, importExt );
		importDir = path.dirname( importPath );

		if ( importExt === '' ) {
			importExt = '.js';
		}

		importPath = path.join( importDir, importBase + importExt );

		relativePath = path.relative(sourceDir, importPath);

		return 'import ' + identifier + " from './" + relativePath + "';";
	}

	/**
	 * Transform export statement to use relative path.
	 *
	 * @private
	 * @param {String} str - matched string
	 * @param {String} name - imported name
	 * @param {String} exportName - exported name
	 * @param {String} importPath - imported path, to be transformed
	 * @throws {Error} paths must match validation, if provided
	 * @returns {String} transformed export string
	 */
	function transformNamedExport( str, name, exportName, importPath ) {
		var relativePath;
		var importBase;
		var importDir;
		var importExt;

		if ( pathValidationRegExp && !pathValidationRegExp.test( importPath ) ) { // eslint-disable-line max-len
			throw new Error( 'Error while processing \'' + str + '\'. Expected path to match \'' + opts['validatePath'] + '\' but got path \'' + importPath + '\'' );
		}

		importPath = path.resolve( path.join( baseDir, importPath ) );

		// Decompose and reassemble the path so that we can be sure not to mix up directories with files with implicit extensions
		importExt = path.extname( importPath );
		importBase = path.basename( importPath, importExt );
		importDir = path.dirname( importPath );

		if ( importExt === '' ) {
			importExt = '.js';
		}

		importPath = path.join( importDir, importBase + importExt );

		relativePath = path.relative(sourceDir, importPath);

		return 'export { ' + name + ' as ' + exportName + "} from './" + relativePath + "';";
	}

	src = replace( src, IMPORT_REGEX, transformImport );
	src = replace( src, NAMED_EXPORT_REGEX, transformNamedExport );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformImports;
