/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var transform = require( './../lib' );


// TESTS //

tape( 'import with single quotes', function test( t ) {
	var output;
	var input;

	input = "import foo from 'foo/bop/beep.js';";
	output = transform( 'foo/bar/baz.js', '', input );

	t.equal( output, "import foo from './../bop/beep.js';" );

	t.end();
});

tape( 'import with double quotes', function test( t ) {
	var output;
	var input;

	input = 'import foo from "foo/bop/beep.js";';
	output = transform( 'foo/bar/baz.js', '', input );

	t.equal( output, "import foo from './../bop/beep.js';" );

	t.end();
});

tape( 'single import', function test( t ) {
	var output;
	var input;

	input = 'import { foo } from "foo/bop/beep.js";';
	output = transform( 'foo/bar/baz.js', '', input );

	t.equal( output, "import { foo } from './../bop/beep.js';" );

	t.end();
});

tape( 'single import with reassignment', function test( t ) {
	var output;
	var input;

	input = 'import { foo as bar } from "foo/bop/beep.js";';
	output = transform( 'foo/bar/baz.js', '', input );

	t.equal( output, "import { foo as bar } from './../bop/beep.js';" );

	t.end();
});

tape( 'path validation fails on path mismatch', function test( t ) {
	var transformOpts;
	var input;

	input = "import foo from 'foo/bop/beep.js';";

	transformOpts = {
		'validatePath': /^@stdlib/
	};

	t.throws( performTransform, /Expected path to match/ );

	function performTransform() {
		transform( 'foo/bar/baz.js', '', input, transformOpts );
	}

	t.end();
});

tape( 'path validation passes on path match', function test( t ) {
	var transformOpts;
	var input;

	input = "import foo from '@stdlib/foo/bop/beep.js';";

	transformOpts = {
		'validatePath': /^@stdlib/
	};

	t.doesNotThrow( performTransform );

	function performTransform() {
		transform( 'foo/bar/baz.js', '', input, transformOpts );
	}

	t.end();
});
