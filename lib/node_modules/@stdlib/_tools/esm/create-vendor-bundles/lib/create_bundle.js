/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var debug = require('debug');
var rollup = require('rollup');
var rollupPluginVirtual = require( '@rollup/plugin-virtual' );
var rollupPluginResolve = require( '@rollup/plugin-node-resolve' ).default;
var rollupPluginCommonjs = require( '@rollup/plugin-commonjs' );
var minify = require( 'terser' ).minify;


// VARIABLES //

var logger = debug('esm:create-vendor-bundles');

// See for context: https://github.com/d3/d3-interpolate/issues/58
var D3_WARNING = /Circular dependency.*d3-interpolate/;


// FUNCTIONS //

/**
 * Silence Rollup warnings resulting from circular D3 dependencies.
 *
 * @private
 * @param {string} message - candidate message to be silenced
 * @returns {string|undefined} original message or undefined, if silenced
 */
function swallowD3Warning( message ) {
	if ( D3_WARNING.test(message) ) {
		return;
	}

	return message;
}

/**
 * Minify a bundled output.
 *
 * @private
 * @param {Object} bundle - output of bundling
 * @returns {Object} minified result
 */
function minifyBundle( bundle ) {
	var code = bundle.output[0].code;

	return minify(code, {
		'compress': true,
		'mangle': true
	});
}

/**
 * Create a vendored bundle for an external module.
 *
 * @param {string} moduleName - name of node module to be vendored
 * @param {Callback} clbk - callback executed on completion
 * @returns {void}
 */
function createBundle( moduleName, clbk ) {
	var outputOptions;
	var inputOptions;

	logger( 'Creating vendor bundle for %s', moduleName );

	inputOptions = {
		'input': 'virtual.js',
		'plugins': [
			rollupPluginVirtual({
				'virtual.js': 'import mod from \'' + moduleName + '\';\nexport default mod;'
			}),
			rollupPluginResolve({
				'preferBuiltins': false,
				'browser': true
			}),
			rollupPluginCommonjs()
		],
		'onwarn': swallowD3Warning
	};

	outputOptions = {
	};

	/**
	 * Perform bundling.
	 *
	 * @private
	 * @param {Object} bundler - configured bundler instance
	 * @returns {Object} bundler output
	 */
	function generateBundle( bundler ) {
		return bundler.generate( outputOptions );
	}

	/**
	 * Handle an error encountered during the process.
	 *
	 * @private
	 * @param {Error|null} error - bundler error
	 */
	function handleError( error ) {
		clbk( error, null );
	}

	/**
	 * Handle the bundled result, passing the bundler output to the callback.
	 *
	 * @private
	 * @param {Object} output - bundler output
	 * @returns {void}
	 */
	function handleBundled( output ) {
		clbk( null, output.code );
	}

	rollup.rollup(inputOptions)
		.then( generateBundle )
		.then( minifyBundle )
		.then( handleBundled )
		.catch( handleError );
}


// EXPORTS //

module.exports = createBundle;
