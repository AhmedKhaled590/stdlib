/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var REQUIRE_STATEMENT_REGEX = /var\s+([A-z\$\@][\$\@\w]*)\s*=\s*require\s*\(\s*('([^']*)'|"([^"]*)")\s*\)\s*(\.\s*([A-z\$\@][\$\@\w]*))?\s*;/g; // eslint-disable-line no-useless-escape
var EXPORT_STATEMENT_REGEX = /module\.exports\s*=\s*([A-z\$\@][\$\@\w]*)\s*;/g; // eslint-disable-line no-useless-escape

var serialIdentifierId = 0;


// FUNCTIONS //

function createUniqueIdentifier () {
	var identifier;

	identifier = '__var_' + serialIdentifierId + '__';
	serialIdentifierId++;

	return identifier;
}

function rewriteRequire (str, lvalue, _1, singleQuotePath, doubleQuotePath, _2, property) {
	var path;
	var lines;
	var identifier;

	path = singleQuotePath === undefined ? doubleQuotePath : singleQuotePath;

	lines = [];

	if ( property === undefined ) {
		lines.push( 'import ' + lvalue + ' from \'' + path + '\'' );
	} else {
		identifier = createUniqueIdentifier();
		lines.push( 'import ' + identifier + ' from \'' + path + '\'' );
		lines.push('var ' + lvalue + ' = ' + identifier + '.' + property + ';');
	}

	return lines.join( '\n' );
}

function rewriteExport (str, identifier) {
	return 'export default ' + identifier;
}

// MAIN //

function transformCommonJS( src ) {
	var isStr;
	var line;
	var len;
	var i;

	serialIdentifierId = 0;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	src = replace( src, REQUIRE_STATEMENT_REGEX, rewriteRequire );
	src = replace( src, EXPORT_STATEMENT_REGEX, rewriteExport );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformCommonJS;
