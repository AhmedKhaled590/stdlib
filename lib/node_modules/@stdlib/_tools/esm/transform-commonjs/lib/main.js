/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var REQUIRE_STATEMENT_REGEX = /^\s*var\s+([A-z\$\][\$\w]*)\s*=\s*require\s*\(\s*('([^']*)'|"([^"]*)")\s*\)\s*(\.\s*([A-z\$][\$\w\.]*))?\s*;$/mg;
var EXPORT_STATEMENT_REGEX = /^\s*module\.exports\s*=\s*([A-z\$_][\$\w]*)\s*;$/mg;
var INLINE_REQUIRE_STATEMENT_REGEX = /^(.*)\brequire\s*\(\s*('([^']*)'|"([^"]*)")\s*\)\s*(\.\s*([A-z\$][\$\w\.]*))?(.*)$/mg;

var serialIdentifierId = 0;


// FUNCTIONS //

// MAIN //

function transformCommonJS( src, opts ) {
	var imports;
	var isStr;
	var line;
	var len;
	var i;


	imports = [];

	function createUniqueIdentifier() {
		var identifier;

		identifier = '__var_' + serialIdentifierId + '__';
		serialIdentifierId++;

		return identifier;
	}

	function transformRequire( str, lvalue, _1, singleQuotePath, doubleQuotePath, _2, property ) {
		var path;
		var lines;
		var identifier;

		path = singleQuotePath === undefined ? doubleQuotePath : singleQuotePath;

		lines = [];

		identifier = createUniqueIdentifier();
		imports.push( 'import ' + identifier + ' from \'' + path + '\';' );

		if ( property === undefined ) {
			lines.push('var ' + lvalue + ' = ' + identifier + ';');
		} else {
			lines.push('var ' + lvalue + ' = ' + identifier + '.' + property + ';');
		}

		return lines.join( '\n' );
	}

	function transformInlineRequire( str, prefix, _1, singleQuotePath, doubleQuotePath, _2, property, suffix ) {
		var path;
		var lines;
		var identifier;


		// Test for " * var identifier = require('...')" which shows up a lot in comments which should not be transformed.
		if ( /^\s*\*\s*var\b/.test( prefix ) ) {
			return str;
		}

		path = singleQuotePath === undefined ? doubleQuotePath : singleQuotePath;

		lines = [];

		identifier = createUniqueIdentifier();
		imports.push( 'import ' + identifier + ' from \'' + path + '\';' );

		if ( property === undefined ) {
			lines.push( prefix + identifier + suffix );
		} else {
			lines.push(prefix + identifier + '.' + property + suffix );
		}

		return lines.join( '\n' );
	}

	function transformExport( str, identifier ) {
		return 'export default ' + identifier + ';';
	}

	serialIdentifierId = 0;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	src = replace( src, REQUIRE_STATEMENT_REGEX, transformRequire );
	src = replace( src, EXPORT_STATEMENT_REGEX, transformExport );
	src = replace( src, INLINE_REQUIRE_STATEMENT_REGEX, transformInlineRequire );

	src = imports.join('\n') + '\n' + src;

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformCommonJS;
