/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var string2buffer = require( '@stdlib/buffer/from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var REQUIRE_STATEMENT_REGEX = /^\s*var\s+([A-z$\][$\w]*)\s*=\s*require\s*\(\s*('([^']*)'|"([^"]*)")\s*\)\s*(\.\s*([A-z$][$\w.]*))?\s*;$/mg;
var EXPORT_STATEMENT_REGEX = /^\s*module\.exports\s*=\s*([A-z$_][$\w.]*)\s*;(.*)?$/mg;
var RELATIVE_REQUIRE_REGEX = /^\.\//;
var INLINE_REQUIRE_REGEX = /^(.*)\brequire\s*\(\s*('([^']*)'|"([^"]*)")\s*\)\s*(\.\s*([A-z$][$\w.]*))?(.*)$/mg;
var COMMENT_PREFIX_REGEX = /^\s*\*\s*var\b/;
var HAS_EXTENSION_REGEX = /\/?[^/]+\.[^/]+$/;


// FUNCTIONS //

// MAIN //

/**
 * Transform CommonJS requires to ESM imports.
 *
 * @param {String} src - source to be transformed
 * @throws {TypeError} src input must be string or buffer
 * @returns {String} transformed source
 */
function transformCommonJS( src ) {
	var serialIdentifierId;
	var imports;
	var isStr;

	serialIdentifierId = 0;
	imports = [];

	/**
	 * Create a unique variable identifier, unique only per source.
	 *
	 * @private
	 * @returns {String} variable identifier
	 */
	function createUniqueIdentifier() {
		var identifier;

		identifier = '__var_' + serialIdentifierId + '__';
		serialIdentifierId += 1;

		return identifier;
	}

	/**
	 * Perform variable replacement for require statements.
	 *
	 * @private
	 * @param {String} str - matched string
	 * @param {String} lvalue - assigned lvalue identifier
	 * @param {String} _1 - unused match part
	 * @param {String} singleQuotePath - path, if with single quotes
	 * @param {String} doubleQuotePath - path, if with double quotes
	 * @param {String} _2 - unused match part
	 * @param {String} property - optional property access
	 * @returns {String} transformed require statement
	 */
	function transformRequire( str, lvalue, _1, singleQuotePath, doubleQuotePath, _2, property ) { // eslint-disable-line max-len
		var hasExtension;
		var isRelative;
		var identifier;
		var lines;
		var path;

		path = ( typeof singleQuotePath === 'undefined' ) ? doubleQuotePath : singleQuotePath;

		isRelative = RELATIVE_REQUIRE_REGEX.test( path );
		hasExtension = HAS_EXTENSION_REGEX.test( path );

		if ( isRelative && !hasExtension ) {
			path += '/index.js';
		}

		lines = [];

		identifier = createUniqueIdentifier();
		imports.push( 'import ' + identifier + ' from \'' + path + '\';' );

		if ( typeof property === 'undefined' ) {
			lines.push('var ' + lvalue + ' = ' + identifier + ';');
		} else {
			lines.push('var ' + lvalue + ' = ' + identifier + '.' + property + ';');
		}

		return lines.join( '\n' );
	}

	/**
	 * Perform variable replacement for inline require statements.
	 *
	 * Note that use of this pattern is mostly removed from the codebase
	 * but not explicitly forbidden.
	 *
	 * @private
	 * @param {String} str - matched string
	 * @param {String} prefix - part of line preceeding require
	 * @param {String} _1 - unused match part
	 * @param {String} singleQuotePath - path, if with single quotes
	 * @param {String} doubleQuotePath - path, if with double quotes
	 * @param {String} _2 - unused match part
	 * @param {String} property - optional property access
	 * @param {String} suffix - remainder of line
	 * @returns {String} entire line including transformed require statement
	 */
	function transformInlineRequire( str, prefix, _1, singleQuotePath, doubleQuotePath, _2, property, suffix ) { // eslint-disable-line max-len
		var hasExtension;
		var isRelative;
		var identifier;
		var isComment;
		var lines;
		var path;

		isComment = COMMENT_PREFIX_REGEX.test( prefix );

		if ( isComment ) {
			return str;
		}

		path = ( typeof singleQuotePath === 'undefined' ) ? doubleQuotePath : singleQuotePath;

		isRelative = RELATIVE_REQUIRE_REGEX.test( path );
		hasExtension = HAS_EXTENSION_REGEX.test( path );

		if ( isRelative && !hasExtension ) {
			path += '/index.js';
		}

		lines = [];

		identifier = createUniqueIdentifier();
		imports.push( 'import ' + identifier + ' from \'' + path + '\';' );

		if ( typeof property === 'undefined' ) {
			lines.push( prefix + identifier + suffix );
		} else {
			lines.push(prefix + identifier + '.' + property + suffix );
		}

		return lines.join( '\n' );
	}

	/**
	 * Transform CommonJS module exports to ESM exports.
	 *
	 * @private
	 * @param {String} str - matched string
	 * @param {String} identifier - exported identifier
	 * @param {String} trailing - trailing items on line
	 * @returns {String} transformed export statement
	 */
	function transformExport( str, identifier, trailing ) {
		trailing = trailing || '';

		return 'export default ' + identifier + ';' + trailing;
	}

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	src = replace( src, REQUIRE_STATEMENT_REGEX, transformRequire );
	src = replace( src, EXPORT_STATEMENT_REGEX, transformExport );
	src = replace( src, INLINE_REQUIRE_REGEX, transformInlineRequire );

	src = imports.join('\n') + '\n' + src;

	// If provided a source code buffer, return a source code buffer.
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformCommonJS;
