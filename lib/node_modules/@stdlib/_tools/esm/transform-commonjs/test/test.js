/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var transform = require( './../lib' );


// TESTS //

tape( 'require with single quotes', function test( t ) {
	var output;
	var input;

	input = "var foo = require( 'foo/bar' );";
	output = transform( input );

	t.equal(output, "import __var_0__ from 'foo/bar';\nvar foo = __var_0__;");

	t.end();
});

tape( 'require with double quotes', function test( t ) {
	var output;
	var input;

	// Note: We do not expect double quotes, but they should not cause failure.

	input = 'var foo = require( "foo/bar" );';
	output = transform( input );

	t.equal(output, "import __var_0__ from 'foo/bar';\nvar foo = __var_0__;");

	t.end();
});

tape( 'require with maximum whitespace', function test( t ) {
	var output;
	var input;

	// Note: We do not anchor to the start or end of the line, instead merely preservering whitespace (though we reasonably expect there to be none).

	input = "  var  foo  =  require  (  'foo/bar'  )  ;  ";
	output = transform( input );

	t.equal(output, "import __var_0__ from 'foo/bar';  \nvar foo = __var_0__;");

	t.end();
});

tape( 'require with no extra whitespace', function test( t ) {
	var output;
	var input;

	input = "var foo=require('foo/bar');";
	output = transform( input );

	t.equal(output, "import __var_0__ from 'foo/bar';\nvar foo = __var_0__;");

	t.end();
});

tape( 'require with property access', function test( t ) {
	var output;
	var input;

	input = "var foo = require( 'foo/bar' ).baz;";
	output = transform( input );

	t.equal(output, "\nimport {baz as foo} from 'foo/bar';");

	t.end();
});

tape( 'require with property access', function test( t ) {
	var output;
	var input;

	// Note: We permit this case but don't currently expect it

	input = "var foo = require( 'foo/bar' ).baz.bop;";
	output = transform( input );

	t.equal(output, "import __var_0__ from 'foo/bar';\nvar foo = __var_0__.baz.bop;");

	t.end();
});

tape( 'require with local module', function test( t ) {
	var output;
	var input;

	input = "var foo = require( './foo/bar.js' );";
	output = transform( input );

	t.equal(output, "import __var_0__ from './foo/bar.js';\nvar foo = __var_0__;");

	t.end();
});

tape( 'relative require with implicit index.js', function test( t ) {
	var output;
	var input;

	input = "var foo = require( './foo/bar' );";
	output = transform( input );

	t.equal(output, "import __var_0__ from './foo/bar/index.js';\nvar foo = __var_0__;");

	t.end();
});

tape( 'transforms exports', function test( t ) {
	var output;
	var input;

	input = 'module.exports = foo;';
	output = transform( input );

	t.equal(output, '\nexport default foo;');

	t.end();
});

tape( 'transforms exports with trailing comments', function test( t ) {
	var output;
	var input;

	input = 'module.exports = foo; // eslint-pay-attention';
	output = transform( input );

	t.equal(output, '\nexport default foo; // eslint-pay-attention');

	t.end();
});

tape( 'transforms exports with property access', function test( t ) {
	var output;
	var input;

	input = 'module.exports = Object.create;';
	output = transform( input );

	t.equal(output, '\nexport default Object.create;');

	t.end();
});
