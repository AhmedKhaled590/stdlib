/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var string2buffer = require( '@stdlib/buffer/from-string' );


// VARIABLES //

var PROCESS_REGEX = /\bprocess\.(stdin|stderr|stdout|arch|browser|version|nextTick)\b/;


// FUNCTIONS //

// MAIN //

/**
 * Transform source to require process if process is used.
 *
 * @param {String} src - source to be transformed
 * @throws {TypeError} src input must be string or buffer
 * @returns {String} transformed source
 */
function transformProcess( src ) {
	var isStr;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	if ( PROCESS_REGEX.test( src ) ) {
		src = 'import process from \'@stdlib/vendor/process.js\';\n' + src;
	}

	// If provided a source code buffer, return a source code buffer.
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = transformProcess;
