/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var readFile = require( '@stdlib/fs/read-file' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var cwd = require( '@stdlib/process/cwd' );
var transform = require( '@stdlib/_tools/esm/transform-insert-named-exports' );


// VARIABLES //

var debug = logger( 'esm:transform-insert-named-exports-file-list:sync' );

// Filesystem read/write options:
var FOPTS = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Synchronously transform CommonJS requires to ESM imports in a provided file list.
*
* @param {(EmptyArray|StringArray)} files - file list
* @param {Object} opts - options passed to transform function
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} second argument must be either a string, regular expression, or an object
* @returns {(Error|null)} error object
*
* @example
* var files = [
*     './foo/bar.js'
* ];
*
* var src = "var foo = require( 'bar' )";
*
* var err = transformInsertNamedExports( files, src );
* if ( err instanceof Error ) {
*     throw err;
* }
*/
function transformInsertNamedExports( files, opts ) {
	var total;
	var fpath;
	var file;
	var dir;
	var err;
	var f;
	var i;

	if ( !isEmptyArray( files ) && !isStringArray( files ) ) {
		throw new TypeError( 'invalid argument. First argument must be an array of strings. Value: `' + files + '`.' );
	}

	dir = cwd();
	debug( 'Current working directory: %s', dir );

	total = files.length;
	for ( i = 0; i < total; i++ ) {
		f = files[ i ];
		fpath = resolve( dir, f );

		debug( 'Updating file (%d of %d): %s', i+1, total, f );
		file = readFile( fpath, FOPTS );
		if ( file instanceof Error ) {
			debug( 'Encountered an error when attempting to read file: %s. Error: %s', f, file.message );
			return file;
		}
		file = transform( file, opts );
		err = writeFile( fpath, file, FOPTS );
		if ( err ) {
			debug( 'Encountered an error when attempting to write file: %s. Error: %s', f, err.message );
			return err;
		}
		debug( 'Finished updating file %d of %d.', i+1, total );
	}
	return null;
}


// EXPORTS //

module.exports = transformInsertNamedExports;
