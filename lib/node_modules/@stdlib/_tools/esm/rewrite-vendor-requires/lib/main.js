/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var string2buffer = require( '@stdlib/buffer/from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var REQUIRE_STATEMENT_REGEX = /\brequire\s*\(\s*('([^'^\/]*)'|"([^"^\/]*)")\s*\)/g;
var STDLIB_REQUIRE_REGEX = /@stdlib\//;
var RELATIVE_REQUIRE_REGEX = /^\./;


// FUNCTIONS //

function rewriteVendorRequire( str, _1, singleQuotePath, doubleQuotePath) {
	var identifier;
	var isVendor;
	var lines;
	var path;

	path = singleQuotePath === undefined ? doubleQuotePath : singleQuotePath;

	if ( STDLIB_REQUIRE_REGEX.test(path) || RELATIVE_REQUIRE_REGEX.test(path) ) {
		return str;
	}

	return "require( '@stdlib/vendor/" + path + ".js' )";
}

// MAIN //

function rewriteVendorRequires( src, opts ) {
	var isStr;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( 'invalid argument. First argument must be either a string or Buffer. Value: `' + src + '`.' );
	} else {
		src = src.toString();
	}

	src = replace( src, REQUIRE_STATEMENT_REGEX, rewriteVendorRequire );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = rewriteVendorRequires;
