/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var generate = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof generate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		void 0,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			generate( value );
		};
	}
});

tape( 'the function throws an error if provided an unrecognized package name', function test( t ) {
	var values;
	var i;

	values = [
		'beep',
		'beep/boop',
		'foo/bar/baz'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			generate( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid release type', function test( t ) {
	var values;
	var i;

	values = [
		'massive',
		'big',
		'beep',
		'boop',
		'patching'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			generate( 'utils/curry', value );
		};
	}
});

tape( 'the function returns a changelog', function test( t ) {
	var out = generate( 'utils/curry' );
	t.equal( typeof out, 'string', 'returns a string' );

	out = generate( 'stats/base/dists' );
	t.equal( typeof out, 'string', 'returns a string' );

	out = generate( 'proxy' );
	t.equal( typeof out, 'string', 'returns a string' );

	t.end();
});

tape( 'the function returns a changelog for a new release', function test( t ) {
	var out = generate( 'utils/noop', 'patch' );
	t.equal( typeof out, 'string', 'returns a string' );

	out = generate( 'utils/noop', 'minor' );
	t.equal( typeof out, 'string', 'returns a string' );

	out = generate( 'utils/noop', 'major' );
	t.equal( typeof out, 'string', 'returns a string' );

	t.end();
});
