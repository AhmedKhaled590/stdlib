/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var groupBy = require( '@stdlib/utils/group-by' );
var map = require( '@stdlib/utils/map' );
var formatCommitFactory = require( './format_commit_factory.js' );
var formatContributors = require( './format_contributors.js' );
var formatCommits = require( './format_commits.js' );
var breakingChanges = require( './breaking_changes.js' );
var closedIssues = require( './closed_issues.js' );
var heading = require( './heading.js' );


// MAIN //

/**
* Generates a release summary.
*
* @private
* @param {ObjectArray} commits - commit objects
* @param {boolean} excludeCommits - boolean indicating whether to exclude commit details
* @param {boolean} excludeContributors - boolean indicating whether to exclude a list of contributors
* @returns {string} summary
*/
function releaseSummary( commits, excludeCommits, excludeContributors ) {
	var groupedFormat;
	var grouped;
	var out;

	if ( !commits || !commits.length ) {
		return '';
	}
	grouped = groupBy( commits, groupByType );
	groupedFormat = formatCommitFactory( false, false );

	out = '';
	if ( grouped.feat ) {
		out += '\n\n<section class="features">\n\n';
		out += heading( 'Features', 3 );
		out += map( grouped.feat, groupedFormat ).join( '\n' );
		out += '\n\n</section>\n\n';
		out += '<!-- /.features -->\n\n';
	}
	if ( grouped.fix ) {
		out += '\n\n<section class="bug-fixes">\n\n';
		out += heading( 'Bug Fixes', 3 );
		out += map( grouped.fix, groupedFormat ).join( '\n' );
		out += '\n\n</section>\n\n';
		out += '<!-- /.bug-fixes -->\n\n';
	}
	if ( grouped.perf ) {
		out += '\n\n<section class="performance">\n\n';
		out += heading( 'Performance', 3 );
		out += map( grouped.perf, groupedFormat ).join( '\n' );
		out += '\n\n</section>\n\n';
		out += '<!-- /.performance -->\n\n';
	}
	if ( grouped.revert ) {
		out += '\n\n<section class="reverts">\n\n';
		out += heading( 'Reverts', 3 );
		out += map( grouped.revert, groupedFormat ).join( '\n' );
		out += '\n\n</section>\n\n';
		out += '<!-- /.reverts -->\n\n';
	}
	if ( grouped.deprecate ) {
		out += '\n\n<section class="deprecations">\n\n';
		out += heading( 'Deprecations', 3 );
		out += map( grouped.deprecate, groupedFormat ).join( '\n' );
		out += '\n\n</section>\n\n';
		out += '<!-- /.deprecations -->\n\n';
	}
	out += breakingChanges( commits );
	out += closedIssues( commits );
	if ( !excludeCommits ) {
		out += formatCommits( commits );
	}
	if ( !excludeContributors ) {
		out += formatContributors( commits );
	}
	return out;

	/**
	* Groups commits by type.
	*
	* @private
	* @param {Object} commit - commit object
	* @returns {(string|null)} group key
	*/
	function groupByType( commit ) {
		return commit.type;
	}
}


// EXPORTS //

module.exports = releaseSummary;
