/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isArray = require( '@stdlib/assert/is-array' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var parseCommits = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof parseCommits, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		void 0,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parseCommits( value );
		};
	}
});

tape( 'the function returns an empty array if provided a string not matching a package directory', function test( t ) {
	t.deepEqual( parseCommits( 'beep/boop' ), [], 'returns empty array' );
	t.deepEqual( parseCommits( 'foo/bar/baz' ), [], 'returns empty array' );
	t.end();
});

tape( 'the function returns an array of conventional changelog formatted commit message objects', function test( t ) {
	var commits;
	var commit;
	var i;

	commits = parseCommits( 'utils/curry' );
	t.strictEqual( isArray( commits ), true, 'returns an array' );
	t.strictEqual( commits.length > 0, true, 'has length greater than 0' );
	for ( i = 0; i < commits.length; i++ ) {
		commit = commits[ i ];
		t.strictEqual( isPlainObject( commit ), true, 'element is an object' );
		t.strictEqual( hasOwnProp( commit, 'hash' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'date' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'author' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'message' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'type' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'scope' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'subject' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'body' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'footer' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'notes' ), true, 'has property' );
		t.strictEqual( hasOwnProp( commit, 'references' ), true, 'has property' );
	}
	t.end();
});
