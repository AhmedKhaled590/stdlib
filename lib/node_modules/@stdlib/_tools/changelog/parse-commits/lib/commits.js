/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var shell = require( 'child_process' ).execSync; // eslint-disable-line node/no-sync
var replace = require( '@stdlib/string/replace' );
var rootDir = require( '@stdlib/_tools/utils/root-dir' );
var trim = require( '@stdlib/string/trim' );


// VARIABLES //

var GIT_COMMIT_SEP = '$---$';


// FUNCTIONS //

/**
* Escapes double quotes in a string.
*
* @private
* @param {string} str - input string
* @returns {string} escaped string
*
* @example
* var str = escapeDoubleQuotes( 'beep "boop"' );
* // returns 'beep \"boop\"'
*/
function escapeDoubleQuotes( str ) {
	return replace( str, '"', '\\"' );
}


// MAIN //

/**
* Extracts commit details for a specified package.
*
* @private
* @param {string} pkg - package name
* @returns {Array} array of commit details
*
* @example
* var commits = extractCommits( 'utils/curry' );
* // returns [...]
*/
function extractCommits( pkg ) {
	var commits;
	var lines;
	var parts;
	var opts;
	var cmd;
	var out;
	var i;

	opts = {
		'cwd': rootDir(),
		'maxBuffer': 1024*1024*60, // 60 MB
		'stdio': ['pipe', 'pipe', 'ignore'] // stdin, stdout, stderr
	};
	cmd = 'if [ -d "lib/node_modules/@stdlib/'+pkg+'" ]; then\n';
	cmd = '  git log --name-only --no-merges --pretty=format:"%H|%ad|%aN <%aE>|%B|"';
	cmd += ' ';
	cmd += 'lib/node_modules/@stdlib/'+pkg;

	// Insert a separator between commits:
	cmd += ' | ';
	cmd += 'awk \'/^$/{p=1;next} /^[0-9a-f]{40}\\|/{if (p==1) print "'+GIT_COMMIT_SEP+'"; p=0} {print}\'';
	cmd += 'fi\n';

	commits = [];
	out = trim( shell( cmd, opts ).toString() );
	lines = out.split( GIT_COMMIT_SEP );
	for ( i = 0; i < lines.length; i++ ) {
		if ( !lines[ i ] ) {
			continue;
		}
		parts = lines[ i ].split( '|' );
		commits.push({
			'hash': trim( parts[ 0 ] ),
			'date': parts[ 1 ],
			'author': parts[ 2 ],
			'message': trim( escapeDoubleQuotes( parts[ 3 ] ) ),
			'files': trim( parts[ 4 ] ).split( '\n' )
		});
	}
	return commits;
}


// EXPORTS //

module.exports = extractCommits;
