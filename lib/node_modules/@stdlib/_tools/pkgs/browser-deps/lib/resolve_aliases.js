/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );
var logger = require( 'debug' );
var readJSON = require( '@stdlib/fs/read-json' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isPlainObject = require( '@stdlib/assert/is-plain-object' );


// VARIABLES //

var debug = logger( 'browser-pkg-deps:async:resolve-aliases' );
var FOPTS = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Resolves package dependency aliases.
*
* @private
* @param {(ObjectArray)} pkgs - packages
* @param {Callback} clbk - callback to invoke after resolving package dependency aliases
*/
function resolve( pkgs, clbk ) {
	var errFLG;
	var count;
	var len;
	var pkg;
	var i;

	len = pkgs.length;
	count = 0;

	debug( 'Resolving %d package aliases...', len );
	for ( i = 0; i < len; i++ ) {
		pkg = pkgs[ i ];
		debug( 'Resolving package: %s (%d of %d)...', pkg.pkg, i+1, len );
		readJSON( path.join( pkg.dir, 'package.json' ), FOPTS, createClbk( i ) );
	}

	/**
	* Returns a callback to be invoked upon reading package meta data.
	*
	* @private
	* @param {NonNegativeInteger} idx - index
	* @returns {Callback} callback
	*/
	function createClbk( idx ) {
		var pkg = pkgs[ idx ];
		var k = idx + 1;
		return onData;

		/**
		* Callback invoked upon resolving package meta data.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {Object} data - meta data
		* @returns {void}
		*/
		function onData( error, data ) {
			var o;
			if ( errFLG ) {
				return;
			}
			if ( error ) {
				debug( 'Encountered an error when resolving package meta data: %s (%d of %d). Error: %s', pkg.pkg, k, len, error.message );
				errFLG = true;
				return clbk( error );
			}
			debug( 'Successfully resolved package meta data: %s (%d of %d).', pkg.pkg, k, len );

			if ( isString( data.browser ) ) {
				o = {};

				// Check for a valid `main` field...
				if ( isString( data.main ) ) {
					o[ data.main ] = data.browser;
				} else {
					o[ 'index.js' ] = data.browser;
				}
			} else if ( isPlainObject( data.browser ) ) {
				o = data.browser;
			} else {
				o = {};
			}
			debug( 'Successfully resolved package aliases: %s (%d of %d).', pkg.pkg, k, len );
			pkg.aliases = o;

			count += 1;
			if ( count === len ) {
				debug( 'Resolved all package aliases.' );
				return clbk( null, pkgs );
			}
		}
	}
}


// EXPORTS //

module.exports = resolve;
